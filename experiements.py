# Standard Library Imports
import argparse
import json
import os

# Package Imports
from comet_ml import Experiment

# User Defined Imports
from base_experiements import MalImgVGGExp, MicrosoftVggExp, InsureVggExp

# User Defined Constants
ROOT_DIR = os.getcwd()
DATA_DIR = os.path.join(ROOT_DIR, "data-sets")

# Gets Parameters For Running Models From a JSON File
def get_exp_config():
    parser = argparse.ArgumentParser("Config Args for Running Experiements")
    parser.add_argument(
        "-f",
        "--config_file",
        dest="config_file",
        type=str,
        default=None,
        help="config file",
    )

    args = parser.parse_args()

    if not args.config_file:
        print("Please specify a json file")

    else:
        return json.load(open(args.config_file))


# Runs Type and Value Checking On Config File
def check_config(exp_config):
    # Check for Base Model To Run
    if "base_exp" not in exp_config:
        raise ValueError("Need a base experiement to run")
    if exp_config["base_exp"] == None:
        raise ValueError("Need a base experiement to run")

    # Check for Name for Saving Models
    if "model_name" not in exp_config:
        raise ValueError("Need a name for experiement to save")
    if exp_config["model_name"] == None:
        raise ValueError("Need a base experiement to run")

    # Checking if Model Should be Saved
    if "save_model" not in exp_config:
        exp_config["save_model"] = False
    else:
        if not isinstance(exp_config["save_model"], bool):
            raise ValueError("Save Model must be a bool")

    # Checking if History Needs To be Saved as Json
    if "log_history_json" not in exp_config:
        exp_config["log_history_json"] = False
    else:
        if not isinstance(exp_config["log_history_json"], bool):
            raise ValueError("Log History Json must be a bool")

    # Checking if History Needs To be Saved as CSV
    if "log_history_csv" not in exp_config:
        exp_config["log_history_csv"] = False
    else:
        if not isinstance(exp_config["log_history_csv"], bool):
            raise ValueError("Log History CSV must be a bool")

    # Checking Batch Size Paramater
    if "batch_size" not in exp_config:
        exp_config["batch_size"] = False
    else:
        if not isinstance(exp_config["batch_size"], int):
            raise ValueError("Batch Size must be an int")

    # Check Epochs Paramater
    if "epochs" not in exp_config:
        exp_config["epochs"] = False
    else:
        if not isinstance(exp_config["epochs"], int):
            raise ValueError("Number of Epochs must be an int")

    # Checking Early Stopping Paramaters Includig Patience
    if "early_stopping" not in exp_config:
        exp_config["early_stopping"] = False
    else:
        if not isinstance(exp_config["early_stopping"], bool):
            raise ValueError("Early Stopping must be a bool")
        if "patience" not in exp_config:
            exp_config["patience"] = 20
        if not isinstance(exp_config["patience"], int):
            raise ValueError("Patience must be an integer")

    if "comet_logging" not in exp_config:
        exp_config["comet_logging"] = False
    else:
        if not isinstance(exp_config["comet_logging"], bool):
            raise ValueError("Comet Logging myst be a bool")

    if "validation_split" not in exp_config:
        exp_config["validation_split"] = 0.2
    else:
        if not isinstance(exp_config, float):
            raise ValueError("Validation Split Must be a Float")


def get_comet_exp(name):
    comet_exp = Experiment()
    comet_exp.set_name(name)
    return comet_exp


def build_and_train_model(exp_config, comet_exp=None):
    if exp_config["base_exp"] == "malimg_vgg_16":
        exp = MalImgVGGExp()
    elif exp_config["base_exp"] == "microsoft_vgg_16":
        exp = MicrosoftVggExp()
    elif exp_config["base_exp"] == "insure_vgg_16":
        exp = InsureVggExp(exp_config["model_name"])
    else:
        raise ValueError("Base Experiment Does Not Exist")

    exp.run()


def main():
    exp_config = get_exp_config()
    check_config(exp_config)

    # Creating Comet Model for Logging
    if exp_config["comet_logging"]:
        comet_exp = get_comet_exp(exp_config["model_name"])
    else:
        comet_exp = None

    build_and_train_model(exp_config, comet_exp)


if __name__ == "__main__":
    main()

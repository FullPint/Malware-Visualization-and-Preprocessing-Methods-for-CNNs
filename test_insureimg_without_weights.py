# Standard Library Imports
import glob
import os

# External Libray Imports
from keras.applications.vgg16 import VGG16
from keras.preprocessing.image import ImageDataGenerator
from keras import optimizers
from keras.layers import Input, Flatten, Dense
from keras.models import Model
from keras.utils import multi_gpu_model

import numpy as np

# User Defined Imports

# User Defined Constants
MALIMG_PATH = "/project/verma/INSuRE-Malware-Imaging/Malware_Imaging/images/families"
SAVE_MODEL_PATH = (
    "/project/verma/alec/vgg-16-play/saved_models/vgg_16_with_mal_weights_insure.md5"
)
DEFAULT_BATCH = 32
DEFUALT_EPOCH = 25


def get_image_paths_dirs(data_dir):
    return glob.glob(data_dir + "/*")


def get_images_paths(image_dirs):
    return glob.glob(image_dirs + "/*.png")


def get_plain_data_gen():
    return ImageDataGenerator(validation_split=0.2)


def get_train_validation_flows(img_gen):
    return (
        img_gen.flow_from_directory(MALIMG_PATH, subset="training"),
        img_gen.flow_from_directory(MALIMG_PATH, subset="validation"),
    )


def build_model(out_dim):

    # Get back the convolutional part of a VGG network trained on ImageNet
    model_vgg16_conv = VGG16(weights=None, include_top=False)
    model_vgg16_conv.summary()

    # Creating New Input
    input = Input(shape=(256, 256, 3), name="mal_img_input")

    # Using Generated Model
    output_vgg16_conv = model_vgg16_conv(input)

    # Add the fully-connected layers
    x = Flatten(name="flatten")(output_vgg16_conv)
    x = Dense(4096, activation="relu", name="fc1")(x)
    x = Dense(4096, activation="relu", name="fc2")(x)
    x = Dense(out_dim, activation="softmax", name="mal_img_predict")(x)

    return multi_gpu_model(Model(inputs=input, outputs=x), gpus=2)


def compile_model(model):
    model.compile(
        optimizer=optimizers.SGD(),
        loss="categorical_crossentropy",
        metrics=["accuracy"],
    )


def train_model(model, train, val):
    number_of_samples = len(get_image_paths_dirs(MALIMG_PATH))

    model.fit_generator(
        generator=train,
        steps_per_epoch=train.samples // DEFAULT_BATCH,
        validation_data=val,
        validation_steps=train.samples // DEFAULT_BATCH,
        epochs=DEFUALT_EPOCH,
    )


def main():
    img_path_dirs = get_image_paths_dirs(MALIMG_PATH)
    my_model = build_model(len(img_path_dirs))
    compile_model(my_model)
    my_generator = get_plain_data_gen()
    my_train, my_val = get_train_validation_flows(my_generator)
    train_model(my_model, my_train, my_val)
    my_model.save(SAVE_MODEL_PATH)


if __name__ == "__main__":
    main()
